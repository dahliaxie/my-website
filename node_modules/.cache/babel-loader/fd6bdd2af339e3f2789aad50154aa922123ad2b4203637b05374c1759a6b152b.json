{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dahlia\\\\Documents\\\\Portfolio\\\\my-app\\\\src\\\\components\\\\MusicPlayer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MusicPlayer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = ({\n  audioUrl,\n  songTitle,\n  artist\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n  let audioBuffer = null;\n  let audioSource = null;\n  useEffect(() => {\n    // Load the audio file\n    fetch(audioUrl).then(response => {\n      if (!response.ok) {\n        throw new Error(`Network response was not ok: ${response.status}`);\n      }\n      return response.arrayBuffer();\n    }).then(data => audioContext.decodeAudioData(data)).then(decodedData => {\n      audioBuffer = decodedData;\n    }).catch(error => {\n      console.error('Error loading audio:', error);\n    });\n  }, [audioUrl]);\n  const togglePlay = () => {\n    if (isPlaying) {\n      if (audioSource && (audioSource.playbackState === audioSource.PLAYING_STATE || audioSource.playbackState === audioSource.SCHEDULED_STATE)) {\n        audioSource.stop();\n      }\n    } else {\n      if (audioBuffer) {\n        audioSource = audioContext.createBufferSource(); // Create a new AudioBufferSourceNode\n        audioSource.buffer = audioBuffer;\n        audioSource.connect(audioContext.destination);\n        audioSource.start();\n      }\n    }\n    setIsPlaying(!isPlaying);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"music-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: `play-button ${isPlaying ? 'playing' : ''}`,\n      onClick: togglePlay,\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"icon\",\n        children: isPlaying ? '❚❚' : '▶'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"song-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"song-title\",\n        children: songTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"artist\",\n        children: artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayer, \"BwVY8ih+eQv3Bg1ifNx664wzb54=\");\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MusicPlayer","audioUrl","songTitle","artist","_s","isPlaying","setIsPlaying","audioContext","window","AudioContext","webkitAudioContext","audioBuffer","audioSource","fetch","then","response","ok","Error","status","arrayBuffer","data","decodeAudioData","decodedData","catch","error","console","togglePlay","playbackState","PLAYING_STATE","SCHEDULED_STATE","stop","createBufferSource","buffer","connect","destination","start","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dahlia/Documents/Portfolio/my-app/src/components/MusicPlayer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MusicPlayer.css';\r\n\r\nconst MusicPlayer = ({ audioUrl, songTitle, artist }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n  let audioBuffer = null;\r\n  let audioSource = null;\r\n\r\n  useEffect(() => {\r\n    // Load the audio file\r\n    fetch(audioUrl)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok: ${response.status}`);\r\n        }\r\n        return response.arrayBuffer();\r\n      })\r\n      .then(data => audioContext.decodeAudioData(data))\r\n      .then(decodedData => {\r\n        audioBuffer = decodedData;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error loading audio:', error);\r\n      });\r\n  }, [audioUrl]);\r\n  \r\n\r\n  const togglePlay = () => {\r\n    if (isPlaying) {\r\n      if (audioSource && (audioSource.playbackState === audioSource.PLAYING_STATE || audioSource.playbackState === audioSource.SCHEDULED_STATE)) {\r\n        audioSource.stop();\r\n      }\r\n    } else {\r\n      if (audioBuffer) {\r\n        audioSource = audioContext.createBufferSource(); // Create a new AudioBufferSourceNode\r\n        audioSource.buffer = audioBuffer;\r\n        audioSource.connect(audioContext.destination);\r\n        audioSource.start();\r\n      }\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  return (\r\n    <div className=\"music-player\">\r\n      <button className={`play-button ${isPlaying ? 'playing' : ''}`} onClick={togglePlay}>\r\n        <span className=\"icon\">{isPlaying ? '❚❚' : '▶'}</span>\r\n      </button>\r\n      <div className=\"song-info\">\r\n        <div className=\"song-title\">{songTitle}</div>\r\n        <div className=\"artist\">{artist}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicPlayer;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACvD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMW,YAAY,GAAG,KAAKC,MAAM,CAACC,YAAY,IAAID,MAAM,CAACE,kBAAkB,EAAE,CAAC;EAC7E,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,WAAW,GAAG,IAAI;EAEtBf,SAAS,CAAC,MAAM;IACd;IACAgB,KAAK,CAACZ,QAAQ,CAAC,CACZa,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BF,QAAQ,CAACG,MAAO,EAAC,CAAC;MACpE;MACA,OAAOH,QAAQ,CAACI,WAAW,CAAC,CAAC;IAC/B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAIb,YAAY,CAACc,eAAe,CAACD,IAAI,CAAC,CAAC,CAChDN,IAAI,CAACQ,WAAW,IAAI;MACnBX,WAAW,GAAGW,WAAW;IAC3B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EAGd,MAAMyB,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIrB,SAAS,EAAE;MACb,IAAIO,WAAW,KAAKA,WAAW,CAACe,aAAa,KAAKf,WAAW,CAACgB,aAAa,IAAIhB,WAAW,CAACe,aAAa,KAAKf,WAAW,CAACiB,eAAe,CAAC,EAAE;QACzIjB,WAAW,CAACkB,IAAI,CAAC,CAAC;MACpB;IACF,CAAC,MAAM;MACL,IAAInB,WAAW,EAAE;QACfC,WAAW,GAAGL,YAAY,CAACwB,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACjDnB,WAAW,CAACoB,MAAM,GAAGrB,WAAW;QAChCC,WAAW,CAACqB,OAAO,CAAC1B,YAAY,CAAC2B,WAAW,CAAC;QAC7CtB,WAAW,CAACuB,KAAK,CAAC,CAAC;MACrB;IACF;IACA7B,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,oBACEN,OAAA;IAAKqC,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3BtC,OAAA;MAAQqC,SAAS,EAAG,eAAc/B,SAAS,GAAG,SAAS,GAAG,EAAG,EAAE;MAACiC,OAAO,EAAEZ,UAAW;MAAAW,QAAA,eAClFtC,OAAA;QAAMqC,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAEhC,SAAS,GAAG,IAAI,GAAG;MAAG;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACT3C,OAAA;MAAKqC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBACxBtC,OAAA;QAAKqC,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEnC;MAAS;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC7C3C,OAAA;QAAKqC,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAElC;MAAM;QAAAoC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACtC,EAAA,CApDIJ,WAAW;AAAA2C,EAAA,GAAX3C,WAAW;AAsDjB,eAAeA,WAAW;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}