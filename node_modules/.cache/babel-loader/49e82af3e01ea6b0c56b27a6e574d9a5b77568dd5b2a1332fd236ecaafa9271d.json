{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dahlia\\\\Documents\\\\my-website\\\\my-app\\\\src\\\\pages\\\\Experience.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport '../styles/Experience.css'; // Adjust the path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst companyPattern = /([A-Z][a-z]+(?: [A-Z][a-z]+)*)/g; // Matches company names with word breaks\n\nfunction Experience() {\n  _s();\n  const [typedText, setTypedText] = useState('');\n  const [cursorVisible, setCursorVisible] = useState(false);\n  const typingSpeed = 100; // Adjust typing speed in milliseconds\n\n  useEffect(() => {\n    let index = 0;\n    let currentText = '';\n    const type = () => {\n      currentText = fullExperienceText.substring(0, index + 1);\n      // Replace company names with clickable links\n      currentText = currentText.replace(companyPattern, match => {\n        const companyName = match.trim();\n        const url = `https://www.${companyName.toLowerCase()}.com/`; // Replace with your logic\n        return `<a href=\"${url}\">${companyName}</a>`;\n      });\n      setTypedText(currentText);\n      index++;\n      if (index > fullExperienceText.length) {\n        clearInterval(intervalId);\n        setCursorVisible(true);\n      }\n    };\n    const intervalId = setInterval(type, typingSpeed);\n    return () => clearInterval(intervalId);\n  }, []);\n  useEffect(() => {\n    const cursorInterval = setInterval(() => {\n      setCursorVisible(prevVisible => !prevVisible);\n    }, 500); // Adjust blinking speed in milliseconds\n\n    return () => clearInterval(cursorInterval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"experience-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"EXPERIENCE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"experience-text\",\n      dangerouslySetInnerHTML: {\n        __html: typedText\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Experience, \"LuGMLrUomYn2daxt02Dk7eCmECw=\");\n_c = Experience;\nexport default Experience;\nvar _c;\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","companyPattern","Experience","_s","typedText","setTypedText","cursorVisible","setCursorVisible","typingSpeed","index","currentText","type","fullExperienceText","substring","replace","match","companyName","trim","url","toLowerCase","length","clearInterval","intervalId","setInterval","cursorInterval","prevVisible","className","children","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["C:/Users/Dahlia/Documents/my-website/my-app/src/pages/Experience.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Experience.css'; // Adjust the path as needed\r\n\r\nconst companyPattern = /([A-Z][a-z]+(?: [A-Z][a-z]+)*)/g; // Matches company names with word breaks\r\n\r\nfunction Experience() {\r\n  const [typedText, setTypedText] = useState('');\r\n  const [cursorVisible, setCursorVisible] = useState(false);\r\n\r\n  const typingSpeed = 100; // Adjust typing speed in milliseconds\r\n\r\n  useEffect(() => {\r\n    let index = 0;\r\n    let currentText = '';\r\n\r\n    const type = () => {\r\n      currentText = fullExperienceText.substring(0, index + 1);\r\n      // Replace company names with clickable links\r\n      currentText = currentText.replace(companyPattern, (match) => {\r\n        const companyName = match.trim();\r\n        const url = `https://www.${companyName.toLowerCase()}.com/`; // Replace with your logic\r\n        return `<a href=\"${url}\">${companyName}</a>`;\r\n      });\r\n      setTypedText(currentText);\r\n      index++;\r\n      if (index > fullExperienceText.length) {\r\n        clearInterval(intervalId);\r\n        setCursorVisible(true);\r\n      }\r\n    };\r\n\r\n    const intervalId = setInterval(type, typingSpeed);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const cursorInterval = setInterval(() => {\r\n      setCursorVisible((prevVisible) => !prevVisible);\r\n    }, 500); // Adjust blinking speed in milliseconds\r\n\r\n    return () => clearInterval(cursorInterval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"experience-page\">\r\n      <h2>EXPERIENCE</h2>\r\n      <p className=\"experience-text\" dangerouslySetInnerHTML={{ __html: typedText }}></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Experience;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,cAAc,GAAG,iCAAiC,CAAC,CAAC;;AAE1D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMW,WAAW,GAAG,GAAG,CAAC,CAAC;;EAEzBV,SAAS,CAAC,MAAM;IACd,IAAIW,KAAK,GAAG,CAAC;IACb,IAAIC,WAAW,GAAG,EAAE;IAEpB,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjBD,WAAW,GAAGE,kBAAkB,CAACC,SAAS,CAAC,CAAC,EAAEJ,KAAK,GAAG,CAAC,CAAC;MACxD;MACAC,WAAW,GAAGA,WAAW,CAACI,OAAO,CAACb,cAAc,EAAGc,KAAK,IAAK;QAC3D,MAAMC,WAAW,GAAGD,KAAK,CAACE,IAAI,CAAC,CAAC;QAChC,MAAMC,GAAG,GAAI,eAAcF,WAAW,CAACG,WAAW,CAAC,CAAE,OAAM,CAAC,CAAC;QAC7D,OAAQ,YAAWD,GAAI,KAAIF,WAAY,MAAK;MAC9C,CAAC,CAAC;MACFX,YAAY,CAACK,WAAW,CAAC;MACzBD,KAAK,EAAE;MACP,IAAIA,KAAK,GAAGG,kBAAkB,CAACQ,MAAM,EAAE;QACrCC,aAAa,CAACC,UAAU,CAAC;QACzBf,gBAAgB,CAAC,IAAI,CAAC;MACxB;IACF,CAAC;IAED,MAAMe,UAAU,GAAGC,WAAW,CAACZ,IAAI,EAAEH,WAAW,CAAC;IAEjD,OAAO,MAAMa,aAAa,CAACC,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAENxB,SAAS,CAAC,MAAM;IACd,MAAM0B,cAAc,GAAGD,WAAW,CAAC,MAAM;MACvChB,gBAAgB,CAAEkB,WAAW,IAAK,CAACA,WAAW,CAAC;IACjD,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;;IAET,OAAO,MAAMJ,aAAa,CAACG,cAAc,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACExB,OAAA;IAAK0B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9B3B,OAAA;MAAA2B,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnB/B,OAAA;MAAG0B,SAAS,EAAC,iBAAiB;MAACM,uBAAuB,EAAE;QAAEC,MAAM,EAAE7B;MAAU;IAAE;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChF,CAAC;AAEV;AAAC5B,EAAA,CA7CQD,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA+CnB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}